/**
 * Copyright (C) 2015 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Path to the helm directory
const HELM_DIR = path.join(__dirname, "..", "helm", "gko");

// Path to the helm templates directory
const TEMPLATE_DIR = path.join(HELM_DIR, "templates");

// Path to the helm crds directory. This resources are not templated.
const CRD_DIR = path.join(HELM_DIR, "crds");

// The template file is the file that contains all the resources except the CRDs. This file can be templated.
const TEMPLATE_FILE = path.join(TEMPLATE_DIR, "bundle.yaml");

// Read the template file. This file is generated by the `make prepare-bundle` target.
const TEMPLATE = fs.readFileSync(TEMPLATE_FILE, "utf8");

// The template file parsed as a YAML documents.
const TEMPLATE_YAML = YAML.parseAllDocuments(TEMPLATE);

const CRD_KIND = "CustomResourceDefinition";

let templateContent = "";

// Because of the way Helm 3 handles CRD, we have to parse the bundle file,
// exclude the CRD resources and write them in a dedicated file in the crds directory.
// see https://helm.sh/docs/chart_best_practices/custom_resource_definitions/
function run() {  
  let templateContent = String();

  for (const resource of TEMPLATE_YAML) {
    if (isCRD(resource)) {
      writeCRDFile(resource);
    } else {
      templateContent= appendTemplateContent(templateContent, resource);
    }
  }

  replaceBundleFile(templateContent);
}

run();

function isCRD(resource) {
  return resource.toJS().kind === CRD_KIND;
}

function getKind(resource) {
  return resource.toJS().spec.names.kind;
}

function toKebabCase(camelCaseString) {
  return camelCaseString.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
}

function getCRDFile(resource) {
  return path.join(CRD_DIR, `${toKebabCase(getKind(resource))}.yaml`);
}

// Write the CRD resource in a dedicated file in the crds directory.
function writeCRDFile(resource) {
  fs.writeFileSync(getCRDFile(resource), resource.toString());
}

// Append the resource to the template content (if it is not a CRD).
function appendTemplateContent(templateContent, resource) {
  return templateContent + resource.toString();
}

// Replace template file with the new template content (excluding CRDs)
function replaceBundleFile(templateContent) {
  fs.writeFileSync(TEMPLATE_FILE, templateContent);
}

