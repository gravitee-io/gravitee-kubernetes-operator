# Copyright (C) 2015 The Gravitee team (http://gravitee.io)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: v2-api-with-multiple-groups
spec:
  bindings:
    - name: apiName
      value: v2-api-with-multiple-groups
    - name: commandDir
      value: "../../../../../commands"
    - name: gkoNamespace
      value: default
    - name: exportedApiYaml
      value: exportedApi.yaml
    - name: service_account_name
      value: service-account-for-v2-api-with-multiple-groups-test

  steps:
  - name: Create a new service account
    use:
      template: ../../../../../stepTemplates/createServiceAccount.yaml

  - name: Create Groups with newly created member
    try:
      - create:
          file: group1.yaml
      - create:
          file: group2.yaml
      - create:
          file: group3.yaml
      - wait:
          apiVersion: gravitee.io/v1alpha1
          kind: Group
          name: group3-for-v2-api-with-multiple-groups-test
          for:
            condition:
              name: Accepted
              value: "True"

  - name: Create API with newly created groups
    use:
      template: ../../../../../stepTemplates/createV2Api.yaml
      with:
        bindings:
          - name: file
            value: v2-api-with-multiple-groups.yaml

  - name: Export API as YAML
    try:
      - script:
          env:
            - name: COMMAND_DIR
              value: ($commandDir)
            - name: API_NAME
              value: ($apiName)
            - name: RESOURCE_NAMESPACE
              value: ($namespace)
            - name: EXPORTED_API_YAML
              value: ($exportedApiYaml)
          content: |
            API_ID=$(kubectl get apidefinitions.gravitee.io -n $RESOURCE_NAMESPACE $API_NAME -o jsonpath='{.status.id}')
            npx zx $COMMAND_DIR/exportApiAsYaml.mjs --api_id $API_ID --api_version v2 > $EXPORTED_API_YAML

  - name: Assert exported API for created groups
    try:
      - script:
          env:
            - name: SERVICE_ACCOUNT_NAME
              value: ($service_account_name)
            - name: EXPORTED_API_YAML
              value: ($exportedApiYaml)
          content: |
            for group in \
              "group1-for-v2-api-with-multiple-groups-test" \
              "group2-for-v2-api-with-multiple-groups-test" \
              "group3-for-v2-api-with-multiple-groups-test"; do
              if ! yq -e ".spec.groups[] | select(. == \"$group\")" $EXPORTED_API_YAML; then
                echo "Group $group not found in exported API"
                exit 1
              fi
            done
            rm $EXPORTED_API_YAML

  - name: Update API with removing one group
    use:
      template: ../../../../../stepTemplates/updateV2Api.yaml
      with:
        bindings:
          - name: file
            value: v2-api-with-one-removed-group.yaml
            
  - name: Export API again after update
    try:
      - script:
          env:
            - name: COMMAND_DIR
              value: ($commandDir)
            - name: API_NAME
              value: ($apiName)
            - name: RESOURCE_NAMESPACE
              value: ($namespace)
            - name: EXPORTED_API_YAML
              value: ($exportedApiYaml)
          content: |
            API_ID=$(kubectl get apidefinitions.gravitee.io -n $RESOURCE_NAMESPACE $API_NAME -o jsonpath='{.status.id}')
            npx zx $COMMAND_DIR/exportApiAsYaml.mjs --api_id $API_ID --api_version v2 > $EXPORTED_API_YAML

  - name: Assert exported API for removed group
    try:
      - script:
          env:
            - name: SERVICE_ACCOUNT_NAME
              value: ($service_account_name)
            - name: EXPORTED_API_YAML
              value: ($exportedApiYaml)
          content: |
            for group in \
              "group1-for-v2-api-with-multiple-groups-test" \
              "group3-for-v2-api-with-multiple-groups-test"; do
              if ! yq -e ".spec.groups[] | select(. == \"$group\")" $EXPORTED_API_YAML; then
                echo "Group $group not found in exported API"
                exit 1
              fi
            done
            rm $EXPORTED_API_YAML