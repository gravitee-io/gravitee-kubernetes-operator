# Copyright (C) 2015 The Gravitee team (http://gravitee.io)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: v4-update-notification-events-test
spec:
  bindings:
    - name: apiName
      value: v4-update-notification-events-test
    - name: service_account_name
      value: service-account-for-v4-update-notification-events-test
    - name: commandDir
      value: "../../../../commands"
    - name: gkoNamespace
      value: default
    - name: exportedApiYaml
      value: exportedApi.yaml  

  steps:
  - name: Remove pre-existing service account
    try:
      - script:
          env:
            - name: COMMAND_DIR
              value: ($commandDir)
            - name: SERVICE_ACCOUNT_NAME
              value: ($service_account_name)
          content: |
            npx zx $COMMAND_DIR/deleteServiceAccount.mjs --name "$SERVICE_ACCOUNT_NAME"

  - name: Create a new service account
    try:
      - script:
          env:
            - name: COMMAND_DIR
              value: ($commandDir)
            - name: SERVICE_ACCOUNT_NAME
              value: ($service_account_name)
          content: |
            npx zx $COMMAND_DIR/createServiceAccount.mjs --name $SERVICE_ACCOUNT_NAME
          check:
              ($error): ~
              (contains($stdout, '@graviteesource.com')): true
    catch:
      - podLogs:
          selector: "app.kubernetes.io/component=api"
          namespace: ($gkoNamespace)
      
  - name: Create a new Group resource
    try:
      - create:
          file: group.yaml

  - name: Create a new Notification resource
    try:
      - create:
          file: notification-with-groups.yml

  - name: Create API with notifications and groups
    try:
      - create:
          file: api-v4-with-notifications-and-groups.yml

  - name: Export API as YAML
    try:
      - sleep:
          duration: 5s
      - script:
          env:
            - name: COMMAND_DIR
              value: ($commandDir)
            - name: API_NAME
              value: ($apiName)
            - name: RESOURCE_NAMESPACE
              value: ($namespace)
            - name: EXPORTED_API_YAML
              value: ($exportedApiYaml)
          content: |
            sleep 10
            API_ID=$(kubectl get apiv4definitions.gravitee.io -n $RESOURCE_NAMESPACE $API_NAME -o jsonpath='{.status.id}')
            npx zx $COMMAND_DIR/exportApiAsYaml.mjs --api_id $API_ID --api_version v4 > $EXPORTED_API_YAML
    catch:
      - podLogs:
          selector: "app.kubernetes.io/component=api"
          namespace: ($gkoNamespace)

  - name: Assert export for group and notifications
    try:
      - script:
          env:
            - name: SERVICE_ACCOUNT_NAME
              value: ($service_account_name)
            - name: EXPORTED_API_YAML
              value: ($exportedApiYaml)
          content: |
            echo "groupRefs=$(yq '.spec.groups' "$EXPORTED_API_YAML")"
            echo "notificationsRefs=$(yq '.spec.notificationRefs[0].name' "$EXPORTED_API_YAML")"
            # rm -f "$EXPORTED_API_YAML"
          check:
            (contains($stdout, 'developers')): true

  - name: Export and assert Notifications
    try:
      - script:
          env:
            - name: COMMAND_DIR
              value: ($commandDir)
            - name: API_NAME
              value: ($apiName)
            - name: RESOURCE_NAMESPACE
              value: ($namespace)
            - name: SERVICE_ACCOUNT_NAME
              value: ($service_account_name)
          content: |
            API_ID=$(kubectl get apiv4definitions.gravitee.io -n $RESOURCE_NAMESPACE $API_NAME -o jsonpath='{.status.id}')
            NOTIFICATIONS_JSON=$(npx zx $COMMAND_DIR/getApiNotifications.mjs --api_id $API_ID)
            HOOKS_EXACT=$(echo "$NOTIFICATIONS_JSON" | jq -r '.[] | select(.referenceId=="'"$API_ID"'" and (.hooks | length==2)) | .hooks | join(",")')
            echo "hooksExact=$HOOKS_EXACT"
          check:
            ($error): ~
            (contains($stdout, 'hooksExact=API_STARTED,API_STOPPED')): true
          
