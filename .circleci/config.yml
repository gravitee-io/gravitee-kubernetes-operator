version: 2.1

orbs:
  kubernetes: circleci/kubernetes@1.3.1
  go: circleci/go@1.11.0
  helm: circleci/helm@3.0.2
  keeper: gravitee-io/keeper@0.6.3
  gravitee: gravitee-io/gravitee@4.1.1
  slack: circleci/slack@4.12.6

parameters:
  go-version:
    type: string
    default: "1.22.1"

executors:
  azure-cli:
    parameters:
      resource_class:
        description: The resource class
        type: enum
        enum: ["small", "medium", "large", "xlarge"]
        default: "medium"
    docker:
      # Version can be found here https://docs.microsoft.com/en-us/cli/azure/release-notes-azure-cli
      # be careful when updating the version as it looks it is not following semver
      - image: mcr.microsoft.com/azure-cli:2.58.0
    resource_class: <<parameters.resource_class>>

commands:
  notify-on-failure:
    steps:
      - keeper/env-export:
          secret-url: keeper://ZOz4db245GNaETVwmPBk8w/field/password
          var-name: SLACK_ACCESS_TOKEN
      - slack/notify:
          channel: C02JENTV2AX
          branch_pattern: master,[0-9]+\.[0-9]+\.x
          event: fail
          template: basic_fail_1

  load-snyk-env:
    parameters:
      integration_id_key:
        type: string
    steps:
      - checkout
      - keeper/env-export:
          secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_gko_org_api_token
          var-name: SNYK_API_TOKEN
      - keeper/env-export:
          secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_gko_org_id
          var-name: SNYK_ORG_ID
      - keeper/env-export:
          secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/<< parameters.integration_id_key >>
          var-name: SNYK_INTEGRATION_ID
      - when:
          condition:
            equal: [gravitee_gko_acr_integration_id, << parameters.integration_id_key >>]
          steps:
            - run: 
                name: Setting docker image name
                command: echo "export DOCKER_IMAGE_NAME=kubernetes-operator" >> ${BASH_ENV}
            - run:
                name: Setting docker image tag
                command: echo "export DOCKER_IMAGE_TAG=alpha-latest" >> ${BASH_ENV}
      - when:
          condition:
            equal: [gravitee_gko_dockerhub_integration_id, << parameters.integration_id_key >>]
          steps:
            - run: 
                name: Setting docker image name
                command: echo "export DOCKER_IMAGE_NAME=graviteeio/kubernetes-operator" >> ${BASH_ENV}
            - run:
                name: Setting docker image tag
                command: echo "export DOCKER_IMAGE_TAG=$(git describe --tags --abbrev=0)" >> ${BASH_ENV}

  add-docker-image-to-snyk:
    steps:
      - checkout
      - run:
          name: Add Docker image to Snyk
          command: |
            curl --fail \
                 --include \
                 --request POST \
                 --header "Content-Type: application/json; charset=utf-8" \
                 --header "Authorization: token ${SNYK_API_TOKEN}" \
                 --data-binary "{
              \"target\": {
                \"name\": \"${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}\"
              }
            }" \
            "https://api.snyk.io/api/v1/org/${SNYK_ORG_ID}/integrations/${SNYK_INTEGRATION_ID}/import"
jobs:
  lint-sources:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>
    steps:
      - checkout
      - restore_cache:
          keys:
           - golangci-lint-{{ checksum ".golangci.yml" }}
      - run:
          name: Lint sources
          command: make lint-sources
      - save_cache:
          key: golangci-lint-{{ checksum ".golangci.yml" }}
          paths:
            - /home/circleci/.cache
            - /home/circleci/go/pkg/mod

  lint-licenses:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>
    steps:
      - checkout
      - go/load-cache
      - run:
          name: Lint licenses
          command: make lint-licenses
      - go/save-cache

  lint-commits:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>-node
    steps:
      - checkout
      - run:
          name: Install commitlint
          command: npm i @commitlint/config-conventional @commitlint/cli
      - run:
          name: Lint commits
          command: |
            node_modules/.bin/commitlint \
              -x @commitlint/config-conventional \
              --from $(git describe --tags --abbrev=0)

  lint-resources:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>-node
    resource_class: small
    steps:
      - checkout
      - go/mod-download-cached
      - run:
          name: Check that `make generate` has been executed
          command: |
            make generate
            git diff --quiet HEAD api/
      - run:
          name: Check that `make manifests` has been executed
          command: |
            make manifests
            git diff --quiet HEAD helm/gko/crds
      - run:
          name: Check that `make reference` has been executed
          command: |
            make reference
            git diff --quiet HEAD docs/api/reference.md
      - run:
          name: Check that `make helm-reference` has been executed
          command: |
            make helm-reference
            git diff --quiet HEAD helm/gko/README.md

  test:
    machine:
      image: ubuntu-2204:2024.01.1
      docker_layer_caching: true
    resource_class: large
    steps:
      - checkout
      - go/install:
          version: "<< pipeline.parameters.go-version >>"
      - go/load-cache
      - kubernetes/install-kubectl
      - helm/install_helm_client
      - run:
          name: Install kind
          command: |
            curl -Lo /tmp/kind https://kind.sigs.k8s.io/dl/latest/kind-linux-amd64
            chmod +x /tmp/kind
            sudo mv /tmp/kind /usr/local/bin/
      - keeper/env-export:
          secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/login
          var-name: AZURE_DOCKER_REGISTRY_USERNAME
      - keeper/env-export:
          secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/password
          var-name: AZURE_DOCKER_REGISTRY_PASSWORD
      - run:
          name: Create junit reports directory
          command: mkdir -p "/tmp/junit/reports"
      - run:
          name: Docker login
          command: echo $AZURE_DOCKER_REGISTRY_PASSWORD | docker login --username $AZURE_DOCKER_REGISTRY_USERNAME --password-stdin graviteeio.azurecr.io
      - run:
          name: Install ginkgo
          command: make ginkgo
      - run:
          name: Start cluster
          command: |
            export APIM_IMAGE_REGISTRY=graviteeio.azurecr.io
            export APIM_IMAGE_TAG=master-latest
            make start-cluster
      - run:
          name: Run tests
          command: GOTESTARGS="--output-dir=/tmp/junit/reports --junit-report=junit.xml" make test
      - store_test_results:
          path: /tmp/junit/reports
      - persist_to_workspace:
          root: /tmp/junit/reports
          paths:
            - cover.out
      - go/save-cache

  login-to-azure:
    executor:
      name: azure-cli
      resource_class: small
    parameters:
      clusterName:
        type: enum
        enum: ["devs-preprod"]
        description: Name of the Azure k8s cluster
    steps:
      - keeper/env-export:
          secret-url: keeper://UryantA7MvZe8fkWwcUt8g/field/login
          var-name: AZURE_SP
      - keeper/env-export:
          secret-url: keeper://UryantA7MvZe8fkWwcUt8g/custom_field/tenant
          var-name: AZURE_TENANT
      - keeper/env-export:
          secret-url: keeper://UryantA7MvZe8fkWwcUt8g/field/password
          var-name: AZURE_SP_PASSWORD
      - when:
          condition:
            equal: [devs-preprod, << parameters.clusterName >>]
          steps:
            - run:
                name: Get ~/.kube/config from Azure
                command: |
                  az login --service-principal -u $AZURE_SP --tenant $AZURE_TENANT -p $AZURE_SP_PASSWORD
                  az aks get-credentials --admin --resource-group Devs-Preprod-Hosted --name gravitee-devs-preprod-aks-cluster
      - persist_to_workspace:
          root: ~/
          paths:
            - .kube/config

  publish-private-image:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>-node
    parameters:
      image:
        type: string
      tag:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - helm/install_helm_client
      - keeper/env-export:
          secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/login
          var-name: AZURE_DOCKER_REGISTRY_USERNAME
      - keeper/env-export:
          secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/password
          var-name: AZURE_DOCKER_REGISTRY_PASSWORD
      - run:
          name: Prepare Helm chart
          command: make helm-prepare
      - run:
          name: Build image << parameters.image >>
          command: IMG=<< parameters.image >> TAG=<< parameters.tag >> make docker-build
      - run:
          name: Publish image << parameters.image >>:<<parameters.tag >>
          command: |
            echo $AZURE_DOCKER_REGISTRY_PASSWORD | docker login \
              --username $AZURE_DOCKER_REGISTRY_USERNAME \
              --password-stdin graviteeio.azurecr.io
            IMG=<< parameters.image >> TAG=<< parameters.tag >> make docker-push
            docker logout graviteeio.azurecr.io
          
  helm-install:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>-node
    resource_class: small
    parameters:
      namespace:
        type: string
        default: "apim-apim-master"
        description: The kubernetes namespace in which the operator is deployed
      image:
        type: string
      tag:
        type: string
    steps:
      - checkout
      - helm/install_helm_client
      - kubernetes/install-kubectl
      - go/load-cache
      - attach_workspace:
          name: Restore Kubernetes config
          at: ~/
      - run:
          name: Helm install the operator
          command: |
            helm upgrade --install \
              gko helm/gko \
              --set manager.scope.cluster=false \
              --set manager.image.repository=<< parameters.image >> \
              --set manager.image.tag=<< parameters.tag >> \
              --set serviceAccount.name=gko-<< parameters.namespace >> \
              -n << parameters.namespace >>
      - run:
          name: Rollout controller deployment
          command: |
            kubectl rollout restart deployment gko-controller-manager \
              -n << parameters.namespace >>
      - go/save-cache
      - notify-on-failure

  semantic-release:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>-node
    environment:
      GITHUB_TOKEN: "keeper://TIlcGPFq4rN5GvgnZb9hng/field/password"
      GIT_AUTHOR_NAME: "keeper://q9AKrHbbTqSGDoUl-Lg85g/field/login"
      GIT_AUTHOR_EMAIL: "keeper://q9AKrHbbTqSGDoUl-Lg85g/custom_field/email"
      GIT_COMMITTER_NAME: "keeper://q9AKrHbbTqSGDoUl-Lg85g/field/login"
      GIT_COMMITTER_EMAIL: "keeper://q9AKrHbbTqSGDoUl-Lg85g/custom_field/email"
      DOCKER_USERNAME: "keeper://cooU9UoXIk8Kj0hsP2rkBw/field/login"
      DOCKER_TOKEN: "keeper://cooU9UoXIk8Kj0hsP2rkBw/field/password"
    steps:
      - checkout
      - gravitee/install-semantic-release
      - setup_remote_docker
      - keeper/exec:
          step-name: Docker login
          command: docker login --username="${DOCKER_USERNAME}" -p="${DOCKER_TOKEN}"
      - run:
          name: Install operator SDK
          command: |
            export OPERATOR_SDK_RELEASE_VERSION=v1.23.0
            export ARCH=$(case $(uname -m) in amd64|x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(uname -m) ;; esac)
            export OS=$(uname | awk '{print tolower($0)}')
            export DOWNLOAD_URL=https://github.com/operator-framework/operator-sdk/releases/latest/download
            export BINARY=operator-sdk_${OS}_${ARCH}
            curl -OJL ${DOWNLOAD_URL}/${BINARY}
            chmod +x ${BINARY} && sudo cp ${BINARY} /usr/local/bin/operator-sdk && rm ${BINARY}
      - helm/install_helm_client
      - keeper/exec:
          step-name: "Run Semantic Release"
          command: npx semantic-release

  notify-release-slack:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - keeper/env-export:
          secret-url: keeper://ZOz4db245GNaETVwmPBk8w/field/password
          var-name: SLACK_ACCESS_TOKEN
      - slack/notify:
          channel: C02NGT20S4W
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":kubernetes: Gravitee Kubernetes Operator - <https://github.com/gravitee-io/gravitee-kubernetes-operator/releases/latest|Version ${CIRCLE_TAG}> has been released 🎉"
                  }
                }
              ]
            }

  helm-lint:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>-node
    resource_class: small
    steps:
      - checkout
      - helm/install_helm_client
      - run:
          name: Lint Helm chart
          command: helm lint helm/gko

  helm-test:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>-node
    resource_class: small
    steps:
      - checkout
      - helm/install_helm_client
      - go/load-cache
      - helm/install_helm_plugin:
          helm_plugin_url: https://github.com/quintush/helm-unittest
      - run:
          name: Run Helm unit tests
          command: cd helm && helm unittest -f 'tests/**/*.yaml' gko
      - go/save-cache

  helm-install:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>-node
    resource_class: small
    parameters:
      namespace:
        type: string
        default: "apim-apim-master"
        description: The kubernetes namespace in which the operator is deployed
      image:
        type: string
      tag:
        type: string
    steps:
      - checkout
      - helm/install-helm-client
      - kubernetes/install-kubectl
      - go/load-cache
      - run:
          name: Prepare Helm chart
          command: make helm-prepare
      - attach_workspace:
          name: Restore Kubernetes config
          at: ~/
      - run:
          name: Helm install the operator
          command: |
            helm upgrade --install \
              gko helm/gko \
              --set manager.scope.cluster=false \
              --set manager.image.repository=<< parameters.image >> \
              --set manager.image.tag=<< parameters.tag >> \
              -n << parameters.namespace >>
      - run:
          name: Rollout controller deployment
          command: |
            kubectl rollout restart deployment gko-controller-manager \
              -n << parameters.namespace >>
      - go/save-cache
      - notify-on-failure

  sonarcloud-analysis:
    description: A job that run Sonarcloud analysis
    docker:
      - image: sonarsource/sonar-scanner-cli
    resource_class: large
    steps:
      - run:
          name: Add SSH tool
          command: apk add --no-cache openssh
      - checkout
      - attach_workspace:
          at: /tmp/junit/reports
      - keeper/env-export:
          secret-url: keeper://9x9YgyU6DWzux4DPoHAzDQ/field/password
          var-name: SONAR_TOKEN
      - run:
          name: Run Sonarcloud Analysis
          command: sonar-scanner -Dsonar.projectVersion=$(git describe --tags --abbrev=0)
      - notify-on-failure

  add-docker-images-to-snyk:
    docker:
      - image: cimg/base:stable
    resource_class: small
    parameters:
      integration_id_key:
       type: string
    steps:
      - load-snyk-env:
          integration_id_key: << parameters.integration_id_key >>
      - add-docker-image-to-snyk

workflows:
  pull_requests:
    when:
      and:
        - not:
            equal: [master, << pipeline.git.branch >>]
        - not:
            equal: [alpha, << pipeline.git.branch >>]
    jobs:
      - lint-sources:
          name: Lint sources
      - lint-licenses:
          name: Lint licenses
      - lint-commits:
          name: Lint commits
      - lint-resources:
          name: Lint resources
      - test:
          name: Test
          context: cicd-orchestrator
          requires:
            - Lint sources
            - Lint licenses
            - Lint commits
            - Lint resources
      - helm-lint:
          name: Lint Helm chart
      - helm-test:
          name: Test Helm chart
          requires:
            - Lint Helm chart
      - sonarcloud-analysis:
          name: Sonarcloud Analysis
          context: cicd-orchestrator
          requires:
            - Test
  deploy:
    when:
      and:
        - or:
            - equal: [ci-staging, << pipeline.git.branch >>]
            - equal: [alpha, << pipeline.git.branch >>]
    jobs:
      - test:
          name: Test operator
          context: cicd-orchestrator
      - helm-test:
          name: Test chart
      - login-to-azure:
          name: Authenticate on cluster
          context: cicd-orchestrator
          clusterName: devs-preprod
      - sonarcloud-analysis:
          name: Sonarcloud Analysis
          context: cicd-orchestrator
          requires:
            - Test operator
      - publish-private-image:
          name: Stage image
          image: graviteeio.azurecr.io/kubernetes-operator
          tag: alpha-latest
          context: cicd-orchestrator
          requires:
            - Test operator
            - Test chart
            - Authenticate on cluster
      - add-docker-images-to-snyk:
          name: Trigger snyk import
          context: cicd-orchestrator
          requires:
            - Stage image
          integration_id_key: gravitee_gko_acr_integration_id
      - helm-install:
          name: Deploy in << matrix.namespace >>
          context: cicd-orchestrator
          matrix:
            parameters:
              namespace:
              - apim-apim-3-20-x
              - apim-apim-4-0-x
              - apim-apim-4-1-x
              - apim-apim-4-2-x
              - apim-apim-4-3-x
              - apim-apim-master
              image: [graviteeio.azurecr.io/kubernetes-operator]
              tag: [alpha-latest]
          requires:
            - Stage image

  release:
    when:
      and:
        - or:
            - equal: [master, << pipeline.git.branch >>]
        - not:
            # Workflow will not run when we open a pull request from alpha to master to trigger a release
            equal:
              [<< pipeline.git.revision >>, << pipeline.git.base_revision >>]
    jobs:
      - semantic-release:
          name: Semantic Release
          context: cicd-orchestrator
      - add-docker-images-to-snyk:
          name: Trigger snyk import
          context: cicd-orchestrator
          requires:
            - Semantic Release
          integration_id_key: gravitee_gko_dockerhub_integration_id

  notify-release:
    jobs:
      - notify-release-slack:
          name: Notify gravitee-release-alerts slack channel
          context: cicd-orchestrator
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /\d+\.\d+\.\d+/
