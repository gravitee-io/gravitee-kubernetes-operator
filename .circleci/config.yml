version: 2.1

orbs:
  kubernetes: circleci/kubernetes@1.3.1
  go: circleci/go@1.7.2
  helm: circleci/helm@2.0.1
  keeper: gravitee-io/keeper@0.6.2
  gravitee: gravitee-io/gravitee@2.2.0
  slack: circleci/slack@4.12.1

parameters:
  go-version:
    type: string
    default: "1.19.4"

executors:
  azure-cli:
    parameters:
      resource_class:
        description: The resource class
        type: enum
        enum: ["small", "medium", "large", "xlarge"]
        default: "medium"
    docker:
      # Version can be found here https://docs.microsoft.com/en-us/cli/azure/release-notes-azure-cli
      # be careful when updating the version as it looks it is not following semver
      - image: mcr.microsoft.com/azure-cli:2.44.1
    resource_class: <<parameters.resource_class>>

commands:
  notify-on-failure:
        steps:
            - keeper/env-export:
                  secret-url: keeper://ZOz4db245GNaETVwmPBk8w/field/password
                  var-name: SLACK_ACCESS_TOKEN
            - slack/notify:
                  channel: C02JENTV2AX
                  branch_pattern: master,[0-9]+\.[0-9]+\.x
                  event: fail
                  template: basic_fail_1

jobs:
  lint-sources:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>
    steps:
      - checkout
      - go/load-cache
      - run:
          name: Lint sources
          command: make lint-sources
      - go/save-cache

  lint-licenses:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>
    steps:
      - checkout
      - go/load-cache
      - run:
          name: Lint licenses
          command: make lint-licenses
      - go/save-cache

  lint-commits:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>-node
    steps:
      - checkout
      - run:
          name: Install commitlint
          command: npm i @commitlint/config-conventional @commitlint/cli
      - run:
          name: Lint commits
          command: |
            node_modules/.bin/commitlint \
              -x @commitlint/config-conventional \
              --from $(git describe --tags --abbrev=0)

  lint-resources:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>
    resource_class: small
    steps:
      - checkout
      - go/mod-download-cached
      - run:
          name: Check that make generate has been executed
          command: |
            make generate
            git diff --quiet HEAD
      - run:
          name: Check that make manifests have been executed
          command: |
            make manifests
            git diff --quiet HEAD
      - run:
          name: Check that make reference have been executed
          command: |
            make reference
            git diff --quiet HEAD

  test:
    machine:
      image: ubuntu-2204:2022.04.2
      docker_layer_caching: true
    resource_class: large
    steps:
      - checkout
      - go/install:
          version: "<< pipeline.parameters.go-version >>"
      - go/load-cache
      - kubernetes/install-kubectl
      - helm/install-helm-client
      - keeper/env-export:
          secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/login
          var-name: AZURE_DOCKER_REGISTRY_USERNAME
      - keeper/env-export:
          secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/password
          var-name: AZURE_DOCKER_REGISTRY_PASSWORD
      - run:
          name: Create junit reports directory
          command: mkdir -p "/tmp/junit/reports"
      - run:
          name: Docker login
          command: echo $AZURE_DOCKER_REGISTRY_PASSWORD | docker login --username $AZURE_DOCKER_REGISTRY_USERNAME --password-stdin graviteeio.azurecr.io
      - run:
          name: Install ginkgo
          command: make ginkgo
      - restore_cache:
          keys:
            - k3d-registry-docker-v1
      - run:
          name: Prepare k3d images registry
          command: |
            if [ -f k3d-registry.image.tar ]; then  
              docker load -i k3d-registry.image.tar
              tar -xf k3d-registry.volume.tar
              docker run --name k3d-graviteeio.docker.localhost \
                --net=bridge \
                -h k3d-graviteeio.docker.localhost \
                -p 12345:12345 \
                -e REGISTRY_HTTP_ADDR=:12345 \
                -v $(pwd)/var/lib/registry:/var/lib/registry  \
                -d gko/k3d-registry:latest
              echo "export K3D_PULL=apim" >> $BASH_ENV
            else 
              echo "No registry archive found. All images will be pulled from network."
              echo "export K3D_PULL=all" >> $BASH_ENV
            fi
      - run:
          name: Start APIM using k3d
          command: |
            export APIM_IMAGE_REGISTRY=graviteeio.azurecr.io
            export APIM_IMAGE_TAG=master-latest
            K3DARGS="--pull=${K3D_PULL}" make k3d-init
      - run:
          name: Run tests
          command: GOTESTARGS="--output-dir=/tmp/junit/reports --junit-report=junit.xml" make test
      - run:
          name: Archive k3d registry image and volume for caching
          command: |
            if [ -f k3d-registry.image.tar ]; then 
              echo "K3d registry already saved on disk. Nothing to do"
            else
              docker commit k3d-graviteeio.docker.localhost gko/k3d-registry:latest
              docker save -o k3d-registry.image.tar gko/k3d-registry:latest
              docker run --rm --volumes-from $(docker ps -aqf "name=graviteeio.docker.localhost") -v $(pwd):/backup alpine tar cf /backup/k3d-registry.volume.tar /var/lib/registry
            fi
      - save_cache:
          paths:
            - k3d-registry.image.tar
            - k3d-registry.volume.tar
          key: k3d-registry-docker-v1
      - store_test_results:
          path: /tmp/junit/reports
      - go/save-cache

  login-to-azure:
    executor:
      name: azure-cli
      resource_class: small
    parameters:
      clusterName:
        type: enum
        enum: ["devs-preprod"]
        description: Name of the Azure k8s cluster
    steps:
      - keeper/env-export:
          secret-url: keeper://UryantA7MvZe8fkWwcUt8g/field/login
          var-name: AZURE_SP
      - keeper/env-export:
          secret-url: keeper://UryantA7MvZe8fkWwcUt8g/custom_field/tenant
          var-name: AZURE_TENANT
      - keeper/env-export:
          secret-url: keeper://UryantA7MvZe8fkWwcUt8g/field/password
          var-name: AZURE_SP_PASSWORD
      - when:
          condition:
            equal: [devs-preprod, << parameters.clusterName >>]
          steps:
            - run:
                name: Get ~/.kube/config from Azure
                command: |
                  az login --service-principal -u $AZURE_SP --tenant $AZURE_TENANT -p $AZURE_SP_PASSWORD
                  az aks get-credentials --admin --resource-group Devs-Preprod-Hosted --name gravitee-devs-preprod-aks-cluster
      - persist_to_workspace:
          root: ~/
          paths:
            - .kube/config

  publish-private-image:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>
    parameters:
      image:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - keeper/env-export:
            secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/login
            var-name: AZURE_DOCKER_REGISTRY_USERNAME
      - keeper/env-export:
            secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/password
            var-name: AZURE_DOCKER_REGISTRY_PASSWORD
      - run:
          name: Build image << parameters.image >>
          command: IMG=<< parameters.image >> make docker-build
      - run:
          name: Publish image << parameters.image >>
          command: |
            echo $AZURE_DOCKER_REGISTRY_PASSWORD | docker login \
              --username $AZURE_DOCKER_REGISTRY_USERNAME \
              --password-stdin graviteeio.azurecr.io
            IMG=<< parameters.image >> make docker-push
            docker logout graviteeio.azurecr.io

  semantic-release:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>-node
    environment:
      GITHUB_TOKEN: "keeper://TIlcGPFq4rN5GvgnZb9hng/field/password"
      GIT_AUTHOR_NAME: "keeper://q9AKrHbbTqSGDoUl-Lg85g/field/login"
      GIT_AUTHOR_EMAIL: "keeper://q9AKrHbbTqSGDoUl-Lg85g/custom_field/email"
      GIT_COMMITTER_NAME: "keeper://q9AKrHbbTqSGDoUl-Lg85g/field/login"
      GIT_COMMITTER_EMAIL: "keeper://q9AKrHbbTqSGDoUl-Lg85g/custom_field/email"
      DOCKER_USERNAME: "keeper://cooU9UoXIk8Kj0hsP2rkBw/field/login"
      DOCKER_TOKEN: "keeper://cooU9UoXIk8Kj0hsP2rkBw/field/password"
    steps:
      - checkout
      - gravitee/install-semantic-release
      - setup_remote_docker
      - keeper/exec:
          step-name: Docker login
          command: docker login --username="${DOCKER_USERNAME}" -p="${DOCKER_TOKEN}"
      - run:
          name: Install operator SDK
          command: |
            export OPERATOR_SDK_RELEASE_VERSION=v1.23.0
            export ARCH=$(case $(uname -m) in amd64|x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(uname -m) ;; esac)
            export OS=$(uname | awk '{print tolower($0)}')
            export DOWNLOAD_URL=https://github.com/operator-framework/operator-sdk/releases/latest/download
            export BINARY=operator-sdk_${OS}_${ARCH}
            curl -OJL ${DOWNLOAD_URL}/${BINARY}
            chmod +x ${BINARY} && sudo cp ${BINARY} /usr/local/bin/operator-sdk && rm ${BINARY}
      - helm/install-helm-client
      - keeper/exec:
          step-name: "Run Semantic Release"
          command: npx semantic-release

  notify-release-slack:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - keeper/env-export:
          secret-url: keeper://ZOz4db245GNaETVwmPBk8w/field/password
          var-name: SLACK_ACCESS_TOKEN
      - slack/notify:
          channel: C02NGT20S4W
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":kubernetes: Gravitee Kubernetes Operator - <https://github.com/gravitee-io/gravitee-kubernetes-operator/releases/latest|Version ${CIRCLE_TAG}> has been released 🎉"
                  }
                }
              ]
            }

  helm-lint:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>-node
    resource_class: small
    steps:
      - checkout
      - helm/install-helm-client
      - run:
          name: Prepare Helm chart
          command: make helm-prepare
      - run:
          name: Lint Helm chart
          command: helm lint helm/gko

  helm-test:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>-node
    resource_class: small
    steps:
      - checkout
      - helm/install-helm-client
      - go/load-cache
      - run:
          name: Install Helm unit test plugin
          command: helm plugin install https://github.com/quintush/helm-unittest
      - run:
          name: Prepare Helm chart
          command: make helm-prepare
      - run:
          name: Run Helm unit tests
          command: cd helm && helm unittest -3 gko
      - go/save-cache

  helm-install:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>-node
    resource_class: small
    parameters:
      namespace:
        type: string
        default: "apim-apim-master"
        description: The kubernetes namespace in which the operator is deployed
      image:
        type: string
    steps:
      - checkout
      - helm/install-helm-client
      - go/load-cache
      - run:
          name: Prepare Helm chart
          command: IMG="<< parameters.image >>" make helm-prepare
      - attach_workspace:
          name: Restore Kubernetes config
          at: ~/
      - run:
          name: Helm install the operator
          command: |
            helm upgrade --install \
              gko helm/gko \
              --set manager.scope.cluster=false \
              -n << parameters.namespace >>
      - go/save-cache
      - notify-on-failure

workflows:
  pull_requests:
    when:
      and:
        - not:
            equal: [master, << pipeline.git.branch >>]
        - not:
            equal: [alpha, << pipeline.git.branch >>]
    jobs:
      - lint-sources:
          name: Lint sources
      - lint-licenses:
          name: Lint licenses
      - lint-commits:
          name: Lint commits
      - lint-resources:
          name: Lint resources
      - test:
          name: Test
          context: cicd-orchestrator
          requires:
            - Lint sources
            - Lint licenses
            - Lint commits
            - Lint resources
      - helm-lint:
          name: Lint Helm chart
      - helm-test:
          name: Test Helm chart
          requires:
            - Lint Helm chart

  deploy:
    when:
      and:
        - or:
            - equal: [ci-staging, << pipeline.git.branch >>]
            - equal: [alpha, << pipeline.git.branch >>]
    jobs:
      - test:
          name: Test operator
          context: cicd-orchestrator
      - helm-test:
          name: Test chart
      - login-to-azure:
          name: Authenticate on cluster
          context: cicd-orchestrator
          clusterName: devs-preprod
      - publish-private-image:
          name: Stage image
          image: graviteeio.azurecr.io/kubernetes-operator:alpha-latest
          context: cicd-orchestrator
          requires:
            - Test operator
            - Test chart
            - Authenticate on cluster
      - helm-install:
          name: Deploy in << matrix.namespace >>
          context: cicd-orchestrator
          matrix:
            parameters:
              namespace: [apim-apim-master]
              image: [graviteeio.azurecr.io/kubernetes-operator:alpha-latest]
          requires:
            - Stage image

  release:
    when:
      and:
        - or:
            - equal: [master, << pipeline.git.branch >>]
        - not:
            # Workflow will not run when we open a pull request from alpha to master to trigger a release
            equal:
              [<< pipeline.git.revision >>, << pipeline.git.base_revision >>]
    jobs:
      - helm-test:
          name: Test chart
      - semantic-release:
          name: Semantic Release
          context: cicd-orchestrator
          requires:
            - Test chart

  notify-release:
    jobs:
      - notify-release-slack:
          name: Notify gravitee-release-alerts slack channel
          context: cicd-orchestrator
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /\d+\.\d+\.\d+/
