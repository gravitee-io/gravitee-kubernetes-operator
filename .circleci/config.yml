version: 2.1

orbs: 
  kubernetes: circleci/kubernetes@1.3.1
  go: circleci/go@1.7.1
  helm: circleci/helm@2.0.1
  keeper: gravitee-io/keeper@0.6.2

executors:
  azure-cli:
    parameters:
      resource_class:
        description: The resource class
        type: enum
        enum: ["small", "medium", "large", "xlarge"]
        default: "medium"
    docker:
      # Version can be found here https://docs.microsoft.com/en-us/cli/azure/release-notes-azure-cli
      # be careful when updating the version as it looks it is not following semver
      - image: mcr.microsoft.com/azure-cli:2.39.0
    resource_class: <<parameters.resource_class>>

commands:
  get-docker-img:
    steps:
      - run:
          name: Get docker image name & tag
          command: |
            export VERSION=${CIRCLE_BRANCH}-latest
            export IMG=graviteeio.azurecr.io/gko:${VERSION}
            echo "export IMG=$IMG" >> $BASH_ENV

jobs:
  lint:
    docker:
      - image: cimg/go:1.19.0
    steps:
      - checkout
      - go/mod-download-cached
      - run:
          name: Install GolangCi Lint
          command: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - run:
          name: Run Lint
          command: golangci-lint run ./...
      - run:
          name: Check that make generate has been executed
          command: |
            make generate
            git diff --quiet HEAD
      - run:
          name: Check that make manifests have been executed
          command: |
            make manifests
            git diff --quiet HEAD
      - run:
          name: Check that make reference have been executed
          command: |
            make reference
            git diff --quiet HEAD

  test:
    machine:
      image: ubuntu-2204:2022.04.2
      docker_layer_caching: true
    resource_class: large
    steps:
      - checkout
      - go/install:
          version: '1.18.4'
      - go/load-cache
      - kubernetes/install-kubectl
      - helm/install-helm-client
      - keeper/env-export:
          secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/login
          var-name: AZURE_DOCKER_REGISTRY_USERNAME
      - keeper/env-export:
          secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/password
          var-name: AZURE_DOCKER_REGISTRY_PASSWORD
      - run:
          name: Create junit reports directory
          command: mkdir -p "/tmp/junit/reports"
      - run:
          name: Docker login
          command: echo $AZURE_DOCKER_REGISTRY_PASSWORD | docker login --username $AZURE_DOCKER_REGISTRY_USERNAME --password-stdin graviteeio.azurecr.io
      - run:
          name: Install gotestsum
          command: make gotestsum
      - run:
          name: Start APIM using k3d
          command: |
            export APIM_IMAGE_REGISTRY=graviteeio.azurecr.io
            export APIM_IMAGE_TAG=master-latest
            make k3d-apim-init
      - run:
          name: Wait for APIM to be ready
          command: kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=apim3 --timeout 300s
      - run:
          name: Install CRDs 
          command: make install
      - run:
          name: Run tests
          command: GOTESTARGS="--junitfile=/tmp/junit/reports/junit.xml" make test
      - store_test_results:
          path: /tmp/junit

  login-to-azure:
    executor:
      name: azure-cli
      resource_class: small
    parameters:
      clusterName:
        type: enum
        enum: ["apim-preprod"]
        description: Name of the Azure k8s cluster
    steps:
      - keeper/env-export:
          secret-url: keeper://UryantA7MvZe8fkWwcUt8g/field/login
          var-name: AZURE_SP
      - keeper/env-export:
          secret-url: keeper://UryantA7MvZe8fkWwcUt8g/custom_field/tenant
          var-name: AZURE_TENANT
      - keeper/env-export:
          secret-url: keeper://UryantA7MvZe8fkWwcUt8g/field/password
          var-name: AZURE_SP_PASSWORD
      - when:
          condition:
            equal: [ apim-preprod, << parameters.clusterName >> ]
          steps: 
            - run:
                name: Get ~/.kube/config from Azure
                command: |
                  az login --service-principal -u $AZURE_SP --tenant $AZURE_TENANT -p $AZURE_SP_PASSWORD
                  az aks get-credentials --admin --resource-group Apim-Preprod-Hosted --name gravitee-apim-preprod-aks-cluster
      - persist_to_workspace:
          root: ~/
          paths:
            - .kube/config

  build-and-publish-deploy-gko-image:
    docker:
      - image: cimg/go:1.19.0
    steps:
      - keeper/env-export:
          secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/login
          var-name: AZURE_DOCKER_REGISTRY_USERNAME
      - keeper/env-export:
          secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/password
          var-name: AZURE_DOCKER_REGISTRY_PASSWORD
      - checkout
      - attach_workspace:
          at: ~/
      - setup_remote_docker:
          docker_layer_caching: true
      - go/mod-download-cached
      - get-docker-img
      - kubernetes/install-kubectl
      - run:
          name: Docker login
          command: echo $AZURE_DOCKER_REGISTRY_PASSWORD | docker login --username $AZURE_DOCKER_REGISTRY_USERNAME --password-stdin graviteeio.azurecr.io
      - run:
          name: Docker Build
          command: make docker-build
      - run:
          name: Docker Push
          command: make docker-push
      - run:
          name: Deploy controller to the K8s cluster specified in ~/.kube/config
          command: make deploy

workflows:
  pull_requests:
    jobs:
      - lint:
          name: Lint
      - test:
          name: Test
          context: cicd-orchestrator
          requires:
            - Lint
      - login-to-azure:
          name: Login to azure and get ~/.kube/config
          context: cicd-orchestrator
          clusterName: apim-preprod
          filters:
            branches:
              only:
               - master
               - work-on-ci-like-master
      - build-and-publish-deploy-gko-image:
          name: Build & Publish docker image to Azure registry and deploy it to k8s
          context: cicd-orchestrator
          requires:
            - Login to azure and get ~/.kube/config
          filters:
            branches:
              only:
               - master
               - work-on-ci-like-master
