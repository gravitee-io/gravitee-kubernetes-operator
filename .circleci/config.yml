version: 2.1

orbs:
  gravitee: gravitee-io/gravitee@4.6.1
  kubernetes: circleci/kubernetes@1.3.1
  go: circleci/go@1.11.0
  helm: circleci/helm@3.0.2
  keeper: gravitee-io/keeper@0.6.3
  slack: circleci/slack@4.13.3
  gh: circleci/github-cli@2.4.0
  aquasec: gravitee-io/aquasec@1.0.4
  azure-cli: circleci/azure-cli@1.2.2

parameters:
  go-version:
    type: string
    default: "1.23.1"
  trigger:
    type: enum
    default: none
    enum:
      - test
      - release
      - none
  release-version:
    type: string
    default: ""
    description: "The version under release then using the release trigger"
  latest:
    type: boolean
    default: false
    description: Is this version the latest version available (when using the release trigger) ?
  dry-run:
    type: boolean
    default: true
  notify:
    type: boolean
    default: false

executors:
  azure-cli:
    docker:
      - image: mcr.microsoft.com/azure-cli:2.64.0
    resource_class: small

commands:
  cmd-setup-aqua-scan:
    steps:
      - keeper/env-export:
          secret-url: keeper://QeHHkvALPob4pgs1hMd9Gw/custom_field/API Key
          var-name: AQUA_KEY
      - keeper/env-export:
          secret-url: keeper://QeHHkvALPob4pgs1hMd9Gw/custom_field/Secret
          var-name: AQUA_SECRET
      - keeper/env-export:
          secret-url: keeper://LYg-wdlM5UDzSqFFH6Kyig/field/login
          var-name: AQUA_USERNAME
      - keeper/env-export:
          secret-url: keeper://LYg-wdlM5UDzSqFFH6Kyig/field/password
          var-name: AQUA_PASSWORD
      - keeper/env-export:
          secret-url: keeper://QeHHkvALPob4pgs1hMd9Gw/custom_field/ScannerToken
          var-name: SCANNER_TOKEN
      - keeper/env-export:
          secret-url: keeper://TIlcGPFq4rN5GvgnZb9hng/field/password
          var-name: GITHUB_TOKEN
  cmd-setup-azure-login:
    steps:
      - keeper/env-export:
          secret-url: keeper://UryantA7MvZe8fkWwcUt8g/field/login
          var-name: AZURE_SP
      - keeper/env-export:
          secret-url: keeper://UryantA7MvZe8fkWwcUt8g/custom_field/tenant
          var-name: AZURE_TENANT
      - keeper/env-export:
          secret-url: keeper://UryantA7MvZe8fkWwcUt8g/field/password
          var-name: AZURE_SP_PASSWORD
jobs:
  job-lint-sources:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>
    steps:
      - checkout
      - restore_cache:
          keys:
            - golangci-lint-{{ checksum ".golangci.yml" }}
      - run:
          name: Lint sources
          command: make lint-sources
      - save_cache:
          key: golangci-lint-{{ checksum ".golangci.yml" }}
          paths:
            - /home/circleci/.cache
            - /home/circleci/go/pkg/mod

  job-lint-licenses:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>
    steps:
      - checkout
      - go/load-cache
      - run:
          name: Lint licenses
          command: make lint-licenses
      - go/save-cache

  job-lint-commits:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>-node
    steps:
      - checkout
      - run:
          name: Install commitlint
          command: npm i @commitlint/config-conventional @commitlint/cli
      - run:
          name: Lint commits
          command: |
            node_modules/.bin/commitlint \
              -x @commitlint/config-conventional \
              --from $(git describe --tags --abbrev=0)

  job-lint-resources:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>-node
    resource_class: small
    steps:
      - checkout
      - go/mod-download-cached
      - run:
          name: Check that `make generate` has been executed
          command: |
            make generate
            git diff --quiet HEAD api/
      - run:
          name: Check that `make manifests` has been executed
          command: |
            make manifests
            git diff --quiet HEAD helm/gko/crds
      - run:
          name: Check that `make reference` has been executed
          command: |
            make reference
            git diff --quiet HEAD docs/api/reference.md
      - run:
          name: Check that `make helm-reference` has been executed
          command: |
            make helm-reference
            git diff --quiet HEAD helm/gko/README.md

  job-unit-test:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>
    resource_class: small
    steps:
      - checkout
      - go/mod-download-cached
      - run:
          name: Run unit tests
          command: |
            UT_ARGS="--cover --coverprofile=cover-unit.out --coverpkg=github.com/gravitee-io/gravitee-kubernetes-operator/... --output-dir=/tmp/junit/reports" \
             make -s unit
      - store_test_results:
          path: /tmp/junit/reports
      - persist_to_workspace:
          root: /tmp/junit/reports
          paths:
            - cover-unit.out
  
  job-integration-test:
    machine:
      image: ubuntu-2204:2024.01.2
      docker_layer_caching: true
    resource_class: medium
    parameters:
      ginkgo-filter:
        type: enum
        enum:
          - withContext
          - withoutContext
          - integration
    steps:
      - checkout
      - go/install:
          version: "<< pipeline.parameters.go-version >>"
      - go/load-cache
      - kubernetes/install-kubectl
      - helm/install_helm_client
      - run:
          name: Install kind
          command: |
            curl -Lo /tmp/kind https://kind.sigs.k8s.io/dl/latest/kind-linux-amd64
            chmod +x /tmp/kind
            sudo mv /tmp/kind /usr/local/bin/
      - gravitee/docker-login:
          registry: graviteeio.azurecr.io
          username: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/login
          password: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/password
      - run:
          name: Create junit reports directory
          command: mkdir -p "/tmp/junit/reports"
      - run:
          name: Install ginkgo
          command: make ginkgo
      - when:
          condition:
            equal:
              - withoutContext
              - << parameters.ginkgo-filter >>
          steps:
            - run:
                command: echo 'export APIM_VALUES=values-dbless.yaml' >> $BASH_ENV
      - run:
          name: Start cluster
          command: |
            export APIM_IMAGE_REGISTRY=graviteeio.azurecr.io
            export APIM_IMAGE_TAG=4.4.x-latest
            make start-cluster
      - run:
          name: Run IT with filter << parameters.ginkgo-filter >>
          command: |
            export SAFE_RANDOM=true
            IT_ARGS="--label-filter=<< parameters.ginkgo-filter >> --flake-attempts=2 --cover --coverprofile=cover-<< parameters.ginkgo-filter >>.out --coverpkg=github.com/gravitee-io/gravitee-kubernetes-operator/... --output-dir=/tmp/junit/reports" make -s it
      - store_test_results:
          path: /tmp/junit/reports
      - persist_to_workspace:
          root: /tmp/junit/reports
          paths:
            - cover-<< parameters.ginkgo-filter >>.out
      - go/save-cache

  job-stage-image:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>-node
    parameters:
      image:
        type: string
      tag:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - gravitee/docker-login:
          registry: graviteeio.azurecr.io
          username: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/login
          password: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/password
      - run:
          name: Build image << parameters.image >>
          command: IMG=<< parameters.image >> TAG=<< parameters.tag >> make docker-build
      - run:
          name: Push image << parameters.image >>:<<parameters.tag >>
          command: |
            IMG=<< parameters.image >> TAG=<< parameters.tag >> make docker-push
      - cmd-setup-aqua-scan
      - aquasec/install_billy
      - aquasec/pull_aqua_scanner_image
      - aquasec/register_artifact:
          artifact_to_register: << parameters.image >>:<< parameters.tag >>
      - aquasec/scan_docker_image:
          docker_image_to_scan: << parameters.image >>:<< parameters.tag >>
          scanner_url: https://82fb8f75da.cloud.aquasec.com
      - gravitee/docker-logout:
          registry: graviteeio.azurecr.io

  job-helm-install:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>-node
    resource_class: small
    parameters:
      namespace:
        type: string
        default: "apim-apim-master"
        description: The kubernetes namespace in which the operator is deployed
      image:
        type: string
      tag:
        type: string
    steps:
      - checkout
      - helm/install_helm_client
      - kubernetes/install-kubectl
      - azure-cli/install
      - go/load-cache
      - cmd-setup-azure-login
      - run:
          name: Run az job-azure-login
          command: |
            az login --service-principal -u $AZURE_SP --tenant $AZURE_TENANT -p $AZURE_SP_PASSWORD
            az aks get-credentials --admin --resource-group Devs-Preprod-Hosted --name gravitee-devs-preprod-aks-cluster
      - run:
          name: Helm install the operator
          command: |
            helm upgrade --install \
              gko helm/gko \
              --set manager.scope.cluster=false \
              --set manager.image.repository=<< parameters.image >> \
              --set manager.image.tag=<< parameters.tag >> \
              --set manager.image.pullPolicy=Always \
              --set serviceAccount.name=gko-<< parameters.namespace >> \
              -n << parameters.namespace >>
      - run:
          name: Rollout controller deployment
          command: |
            kubectl rollout restart deployment gko-controller-manager \
              -n << parameters.namespace >>
      - go/save-cache

  job-release:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>-node
    steps:
      - checkout
      - setup_remote_docker
      - keeper/env-export:
          secret-url: keeper://TIlcGPFq4rN5GvgnZb9hng/field/password
          var-name: GITHUB_TOKEN
      - keeper/env-export:
          secret-url: keeper://q9AKrHbbTqSGDoUl-Lg85g/field/login
          var-name: GIT_AUTHOR_NAME
      - keeper/env-export:
          secret-url: keeper://q9AKrHbbTqSGDoUl-Lg85g/custom_field/email
          var-name: GIT_AUTHOR_EMAIL
      - keeper/env-export:
          secret-url: keeper://q9AKrHbbTqSGDoUl-Lg85g/field/login
          var-name: GIT_COMMITTER_NAME
      - keeper/env-export:
          secret-url: keeper://q9AKrHbbTqSGDoUl-Lg85g/custom_field/email
          var-name: GIT_COMMITTER_EMAIL
      - keeper/env-export:
          secret-url: keeper://cooU9UoXIk8Kj0hsP2rkBw/field/login
          var-name: DOCKER_USERNAME
      - keeper/env-export:
          secret-url: keeper://cooU9UoXIk8Kj0hsP2rkBw/field/password
          var-name: DOCKER_TOKEN
      - keeper/env-export:
          secret-url: keeper://hfnQD5TEfxzwRXUKhJhM-A/field/password
          var-name: JIRA_TOKEN
      - add_ssh_keys:
          fingerprints:
            - ac:88:23:8f:c6:0f:7d:f0:fc:df:73:20:34:56:02:6c
      - run:
          name: Switch to release branch
          command: |
            export RELEASE_BRANCH=$(npx zx scripts/get-release-branch.mjs --version << pipeline.parameters.release-version >>)
            echo "Switching to branch $RELEASE_BRANCH"
            git fetch
            git switch $RELEASE_BRANCH 2>/dev/null || git switch -c $RELEASE_BRANCH
      - run:
          name: Docker login
          command: docker login --username="${DOCKER_USERNAME}" -p="${DOCKER_TOKEN}"
      - run:
          name: Build Docker image for version << pipeline.parameters.release-version >>
          command: |
            docker build -t graviteeio/kubernetes-operator:<< pipeline.parameters.release-version >> .
      - when:
          condition: << pipeline.parameters.latest >>
          steps:
            - run:
                name: Tag << pipeline.parameters.release-version >> image as latest
                command: |
                  docker tag \
                    graviteeio/kubernetes-operator:<< pipeline.parameters.release-version >> \
                    graviteeio/kubernetes-operator:latest
      - when:
          condition:
            and:
              - not: << pipeline.parameters.dry-run >>
              - << pipeline.parameters.latest >>
          steps:
            - run:
                name: Push << pipeline.parameters.release-version >> Docker image as latest tag
                command: |
                  docker push graviteeio/kubernetes-operator:<< pipeline.parameters.release-version >>
                  docker push graviteeio/kubernetes-operator:latest
      - when:
          condition:
            and:
              - not: << pipeline.parameters.dry-run >>
              - not: << pipeline.parameters.latest >>
          steps:
            - run:
                name: Push << pipeline.parameters.release-version >> Docker image tag
                command: |
                  docker push graviteeio/kubernetes-operator:<< pipeline.parameters.release-version >>
      - helm/install_helm_client
      - when:
          condition: << pipeline.parameters.dry-run >>
          steps:
            - run:
                name: Dry run release Helm chart
                command: |
                  npx zx scripts/release-helm-chart.mjs --dry-run --version << pipeline.parameters.release-version >>
      - when:
          condition:
            not: << pipeline.parameters.dry-run >>
          steps:
            - run:
                name: Release Helm chart
                command: |
                  npx zx scripts/release-helm-chart.mjs --version << pipeline.parameters.release-version >>
      - run:
          name: Commit and tag release
          command: |
            make add-license > /dev/null
            git add helm/gko/Chart.yaml
            git add helm/gko/crds
            git commit -m "ci: release version << pipeline.parameters.release-version >> [skip ci]"
            git tag << pipeline.parameters.release-version >>
            echo
            git diff HEAD~1 HEAD
      - when:
          condition:
            not: << pipeline.parameters.dry-run >>
          steps:
            - run:
                name: Push release tag and commit
                command: |
                  export RELEASE_BRANCH=$(npx zx scripts/get-release-branch.mjs --version << pipeline.parameters.release-version >>)
                  git push -u origin $RELEASE_BRANCH
                  git push --tags origin $RELEASE_BRANCH
      - run:
          name: Generate Changelog
          command: npx zx scripts/generate-changelog.mjs --version << pipeline.parameters.release-version >> > /tmp/CHANGELOG.md
      - when:
          condition: << pipeline.parameters.dry-run >>
          steps:
            - run:
                name: Print Changelog
                command: cat /tmp/CHANGELOG.md
      - run:
          name: Generate Release Artifacts
          command: |
            cp -r helm/gko/crds /tmp/crds
            pushd /tmp/crds
              zip -r /tmp/custom-resource-definitions.zip ./*
            popd
      - when:
          condition:
            and:
              - not: << pipeline.parameters.dry-run >>
              - << pipeline.parameters.latest >>
          steps:
            - gh/setup
            - run:
                name: Publish Github Release << pipeline.parameters.release-version >> as latest
                command: |
                  gh release create --latest << pipeline.parameters.release-version >> \
                    /tmp/custom-resource-definitions.zip \
                    -F /tmp/CHANGELOG.md
      - when:
          condition:
            and:
              - not: << pipeline.parameters.dry-run >>
              - not: << pipeline.parameters.latest >>
          steps:
            - gh/setup
            - run:
                name: Publish Github Release << pipeline.parameters.release-version >>
                command: |
                  gh release create << pipeline.parameters.release-version >> \
                    /tmp/custom-resource-definitions.zip \
                    -F /tmp/CHANGELOG.md
      - when:
          condition:
            not: << pipeline.parameters.dry-run >>
          steps:
            - gh/setup
            - run:
                name: Submit Release Changelog for << pipeline.parameters.release-version >>
                command: |
                  npx zx scripts/submit-changelog.mjs \
                    --version << pipeline.parameters.release-version >> \
                    --file /tmp/CHANGELOG.md --output /tmp/pr.txt

  job-notify-release-slack:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - keeper/env-export:
          secret-url: keeper://ZOz4db245GNaETVwmPBk8w/field/password
          var-name: SLACK_ACCESS_TOKEN
      - slack/notify:
          channel: C02NGT20S4W
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":kubernetes: Gravitee Kubernetes Operator - <https://github.com/gravitee-io/gravitee-kubernetes-operator/releases/tag/${CIRCLE_TAG}|Version ${CIRCLE_TAG}> has been released 🎉"
                  }
                }
              ]
            }

  job-helm-lint:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>-node
    resource_class: small
    steps:
      - checkout
      - helm/install_helm_client
      - run:
          name: Lint Helm chart
          command: helm lint helm/gko

  job-helm-test:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>-node
    resource_class: small
    steps:
      - checkout
      - helm/install_helm_client
      - go/load-cache
      - helm/install_helm_plugin:
          helm_plugin_url: https://github.com/quintush/helm-unittest
      - run:
          name: Run Helm unit tests
          command: cd helm && helm unittest -f 'tests/**/*.yaml' gko
      - go/save-cache

  job-sonarcloud-analysis:
    description: A job that run Sonarcloud analysis
    docker:
      - image: sonarsource/sonar-scanner-cli:5.0.1
    resource_class: small
    steps:
      - run:
          name: Add SSH tool
          command: apk add --no-cache openssh
      - checkout
      - attach_workspace:
          at: /tmp/junit/reports
      - keeper/env-export:
          secret-url: keeper://9x9YgyU6DWzux4DPoHAzDQ/field/password
          var-name: SONAR_TOKEN
      - run:
          name: Run Sonarcloud analysis
          command: sonar-scanner -Dsonar.projectVersion=$(git describe --tags --abbrev=0)

workflows:
  pull-request:
    when:
      equal:
        - none
        - << pipeline.parameters.trigger >>
    jobs:
      - job-lint-sources:
          name: Lint sources
      - job-lint-licenses:
          name: Lint licenses
      - job-lint-commits:
          name: Lint commits
      - job-lint-resources:
          name: Lint resources
      - job-unit-test:
          name: Run unit tests
      - job-integration-test:
          name: Run IT with context
          context: cicd-orchestrator
          requires:
            - Lint sources
            - Lint licenses
            - Lint commits
            - Lint resources
            - Run unit tests
          ginkgo-filter: withContext
      - job-integration-test:
          name: Run IT without context
          context: cicd-orchestrator
          requires:
            - Lint sources
            - Lint licenses
            - Lint commits
            - Lint resources
            - Run unit tests
          ginkgo-filter: withoutContext
      - job-helm-lint:
          name: Lint Helm chart
      - job-helm-test:
          name: Test Helm chart
          requires:
            - Lint Helm chart
      - job-sonarcloud-analysis:
          name: Sonarcloud analysis
          context: cicd-orchestrator
          requires:
            - Run IT with context
            - Run IT without context
      - aquasec/fs_scan:
          context: cicd-orchestrator
          pre-steps:
            - cmd-setup-aqua-scan
          requires:
            - Run IT with context
            - Run IT without context
  post-merge:
    when:
      equal:
        - none
        - << pipeline.parameters.trigger >>
    jobs:
      - aquasec/fs_scan:
          context: cicd-orchestrator
          pre-steps:
            - cmd-setup-aqua-scan
          filters:
            branches:
              only:
              - /^[0-9]+\.[0-9]+\.x$/
              - master
            tags:
              ignore: /.*/
      - job-stage-image:
          name: Stage image
          image: graviteeio.azurecr.io/kubernetes-operator
          tag: 4.4.x-latest
          context: cicd-orchestrator
          filters:
            branches:
              only:
              - /^[0-9]+\.[0-9]+\.x$/
              - master
            tags:
              ignore: /.*/
      - job-helm-install:
          context: cicd-orchestrator
          filters:
            branches:
              only:
                - master
            tags:
              ignore:
                - /.*/
          name: Deploy in << matrix.namespace >>
          matrix:
            parameters:
              namespace:
                - apim-apim-master
              image: [graviteeio.azurecr.io/kubernetes-operator]
              tag: [master-latest]
          requires:
            - Stage image
  release:
    when:
      equal:
        - release
        - << pipeline.parameters.trigger >>
    jobs:
      - job-release:
          name: Release
          context: cicd-orchestrator
  post-release:
    when:
      equal:
        - none
        - << pipeline.parameters.trigger >>
    jobs:
      - job-notify-release-slack:
          name: Notify gravitee-release-alerts slack channel
          context: cicd-orchestrator
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /\d+\.\d+\.\d+/
      - aquasec/register_artifact:
          name: Register artifact
          context: cicd-orchestrator
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /\d+\.\d+\.\d+/
          built_docker_image_file: /tmp/docker-image.txt
          pre-steps:
            - cmd-setup-aqua-scan
            - run:
                name: Store docker image version
                command: echo "graviteeio/kubernetes-operator:${CIRCLE_TAG}" > /tmp/docker-image.txt
      - aquasec/docker_image_scan:
          name: Scan docker image
          context: cicd-orchestrator
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /\d+\.\d+\.\d+/
          requires:
            - Register artifact
          scanner_url: https://82fb8f75da.cloud.aquasec.com
          built_docker_image_file: /tmp/docker-image.txt
          pre-steps:
            - cmd-setup-aqua-scan
            - run:
                name: Store docker image version
                command: echo "graviteeio/kubernetes-operator:${CIRCLE_TAG}" > /tmp/docker-image.txt
            - run:
                name: Pull docker image
                command: docker pull "graviteeio/kubernetes-operator:${CIRCLE_TAG}"
  test:
    when:
      equal:
        - test
        - << pipeline.parameters.trigger >>
    jobs:
      - job-integration-test:
          name: Run all integration tests
          context: cicd-orchestrator
          ginkgo-filter: integration
          pre-steps:
            - keeper/env-export:
                secret-url: keeper://ZOz4db245GNaETVwmPBk8w/field/password
                var-name: SLACK_ACCESS_TOKEN
          post-steps:
            - when:
                condition: << pipeline.parameters.notify >>
                steps:
                  - slack/notify:
                      channel: C07QP2Z7Z9V
                      event: fail
                      template: basic_fail_1
                      branch_pattern: ".+"
                  - slack/notify:
                      channel: C07QP2Z7Z9V
                      event: pass
                      template: basic_success_1
                      branch_pattern: ".+"
